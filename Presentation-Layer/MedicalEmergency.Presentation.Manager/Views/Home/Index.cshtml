@model IList<MedicalEmergency.Presentation.Manager.Models.Home.HealthUnitViewModel>

@{
    ViewBag.Title = "Unidades Médicas";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Unidades Médicas</h2>

<style>
    /* Always set the map height explicitly to define the size of the div
      * element that contains the map. */
    #map {
        height: 400px;
        width: 100%;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
</style>



@using (Html.BeginForm())
{
    <input class="form-control custom position" type="text" id="position" placeholder="Endereço" name="position">
    <input type="hidden" id="latitude" name="Latitude" value="@ViewBag.Latitude" />
    <input type="hidden" id="longitude" name="Longitude" value="@ViewBag.Longitude" />
    <input type="hidden" id="flag" name="Flag" value="@ViewBag.Flag"/>

    <input type="submit" class="btn btn-default" id="btn-buscar" value="Buscar" />
}

@if (Model != null)
{
    foreach (var item in Model)
    {
        <div class="healthUnit">
            <div id="name">@Html.DisplayFor(model => item.Name)</div>
            <div id="address">@Html.DisplayFor(model => item.Address)</div>
            <div id="phone">@Html.DisplayFor(model => item.Phone)</div>
            
            @if (item.ShowRoute)
            {
                <input type="button" class="btn btn-default rota" value="Ver rota" />
            }

            @Html.HiddenFor(model => item.Latitude, new { @class = "form-control custom", @id = "latitude" })
            @Html.HiddenFor(model => item.Longitude, new { @class = "form-control custom", @id = "longitude" })
        </div>
    }
}

<div></div>
<div id="map"></div>

<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDT_D3csnZOWkn_UtbWTEZARU2dMToeP48&libraries=places"></script>
<script type="text/javascript">
    var map;
    var directionsDisplay = new google.maps.DirectionsRenderer();
    var directionsService = new google.maps.DirectionsService();

    google.maps.event.addDomListener(window, 'load', function () {
        var options = {
            componentRestrictions: { country: "br" }
        };

        var input = $('#position')[0];
        var places = new google.maps.places.Autocomplete(input, options);

        var latitude = parseFloat($('.healthUnit').first().children('#latitude').val());
        var longitude = parseFloat($('.healthUnit').first().children('#longitude').val());

        var center = { lat: latitude, lng: longitude };

        map = new google.maps.Map($('#map')[0], {
            zoom: 10,
            center: center
        });

        $('.healthUnit').each(function () {
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoPin'><h2> Nome: " +
                  $(this).children('#name').text() + "</h2>" + "<div><h4>Endereço: " +
                  $(this).children('#address').text() + "</h4></div><div><h4>Telefone: " +
                  $(this).children('#phone').text() + "</h4></div></div>"
            });

            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(parseFloat($(this).children('#latitude').val()), parseFloat($(this).children('#longitude').val())),
                'map': map,
                'title': $(this).children('#name').val()
            });

            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });          
        });
    });

    $('.rota').on('click', function () {
        var latitude = parseFloat($(this).parent().children('#latitude').val());
        var longitude = parseFloat($(this).parent().children('#longitude').val());

        directionsDisplay.setMap(null);
        directionsDisplay.setMap(map);

        var request = {
            origin: new google.maps.LatLng(parseFloat($('#latitude').val()), parseFloat($('#longitude').val())),
            destination: new google.maps.LatLng(latitude, longitude),
            travelMode: 'DRIVING'
        }

        directionsService.route(request, function (result, status) {
            if (status == 'OK') {
                directionsDisplay.setDirections({routes: []});
                directionsDisplay.setDirections(result);
            }
        });
    });

    $('#btn-buscar').on('click', function (e) {
        var latitude = $('#latitude').val();
        var longitude = $('#longitude').val();

        var flag = $('#flag').val();

        if (latitude == "" && longitude == "" || (flag == "" || flag == "0")) {
            e.preventDefault();
            GetLocation();
        }
    });

    function GetLocation() {
        var geocoder = new google.maps.Geocoder();

        geocoder.geocode({ 'address': $('#position').val() }, function (results, status) {

            if (status == google.maps.GeocoderStatus.OK) {
                var latitude = results[0].geometry.location.lat();
                var longitude = results[0].geometry.location.lng();

                $('#latitude').val(latitude);
                $('#longitude').val(longitude);

                 $('#flag').val("1");

                $('.rota').show();

                $('#btn-buscar').click();
            }
        });
    }
</script>  
